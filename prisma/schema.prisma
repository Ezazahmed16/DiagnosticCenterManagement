generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id          String    @id @default(uuid())
  name        String
  phone       String    @unique
  address     String?
  bloodType   String?
  gender      Gender
  dateOfBirth DateTime?
  memos       Memo[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Memo {
  id            String        @id @default(uuid())
  patientId     String?
  Patient       Patient?      @relation(fields: [patientId], references: [id])
  name          String
  phone         String
  dateOfBirth   DateTime?
  gender        Gender
  address       String?
  tests         Test[]        @relation("MemoTest")
  paymentMethod PaymentMethod @default(DUE)
  totalAmount   Float         @default(0)
  paidAmount    Float         @default(0)
  dueAmount     Float         @default(0)
  discount      Float         @default(0)
  referredById  String?
  referredBy    ReferredBy?   @relation(fields: [referredById], references: [id])
  performedById String?
  performedBy   PerformedBy?  @relation(fields: [performedById], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  MemoToTest    MemoToTest[]  @relation("MemoTests")
}

model Test {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String?
  testCost       Float    @default(0)
  additionalCost Float    @default(0)
  price          Float
  roomNo         String?
  deliveryTime   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  memos Memo[] @relation("MemoTest")

  PerformedBy   PerformedBy? @relation(fields: [performedById], references: [id])
  performedById String?
  MemoToTest    MemoToTest[]
}

model MemoToTest {
  id     String @id @default(uuid())
  memoId String
  testId String

  // Memo Memo @relation(fields: [memoId], references: [id], onDelete: Cascade)
  Test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Memo Memo[] @relation("MemoTests")
}

model PerformedBy {
  id        String   @id @default(uuid())
  name      String
  phone     String?  @unique
  memos     Memo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tests Test[]
}

model Expense {
  id            String      @id @default(uuid())
  title         String
  description   String
  amount        Float
  date          DateTime    @default(now())
  expenseTypeId String
  expenseType   ExpenseType @relation(fields: [expenseTypeId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ExpenseType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Asset {
  id          String   @id @default(uuid())
  name        String
  description String?
  amount      Float
  qty         Int
  value       Float
  purchasedBy String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReferralPayment {
  id           String     @id @default(uuid())
  referredById String
  referredBy   ReferredBy @relation(fields: [referredById], references: [id])
  amount       Float
  date         DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ReferredBy {
  id                String            @id @default(uuid())
  name              String
  phone             String?           @unique
  commissionPercent Float
  totalAmmount      Float?
  memos             Memo[]
  payments          ReferralPayment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PaymentMethod {
  PAID
  DUE
}
